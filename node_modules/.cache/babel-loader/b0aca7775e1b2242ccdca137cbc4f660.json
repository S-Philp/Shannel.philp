{"ast":null,"code":"var _jsxFileName = \"/Users/shannelphilp/Desktop/Repositories/home/src/components/home/Project.jsx\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Row from \"react-bootstrap/Row\";\nimport ProjectCard from \"./ProjectCard\";\nimport axios from \"axios\";\nconst dummyProject = {\n  name: null,\n  description: null,\n  svn_url: null,\n  stargazers_count: null,\n  languages_url: null,\n  pushed_at: null\n};\nconst API = \"https://api.github.com\"; // const gitHubQuery = \"/repos?sort=updated&direction=desc\";\n// const specficQuerry = \"https://api.github.com/repos/hashirshoaeb/\";\n\nconst Project = ({\n  heading,\n  username,\n  length,\n  specfic\n}) => {\n  const allReposAPI = `${API}/users/${username}/repos?sort=updated&direction=desc`;\n  const specficReposAPI = `${API}/repos/${username}`;\n  const dummyProjectsArr = new Array(length + specfic.length).fill(dummyProject);\n  const [projectsArray, setProjectsArray] = useState([]);\n  const fetchRepos = useCallback(async () => {\n    let repoList = [];\n\n    try {\n      // getting all repos\n      const response = await axios.get(allReposAPI); // slicing to the length\n\n      repoList = [...response.data.slice(0, length)]; // adding specified repos\n\n      try {\n        for (let repoName of specfic) {\n          const response = await axios.get(`${specficReposAPI}/${repoName}`);\n          repoList.push(response.data);\n        }\n      } catch (error) {\n        console.error(error.message);\n      } // setting projectArray\n      // TODO: remove the duplication.\n\n\n      setProjectsArray(repoList);\n    } catch (error) {\n      console.error(error.message);\n    }\n  }, [allReposAPI, length, specfic, specficReposAPI]);\n  useEffect(() => {\n    fetchRepos();\n  }, [fetchRepos]);\n  return /*#__PURE__*/React.createElement(Jumbotron, {\n    fluid: true,\n    id: \"projects\",\n    className: \"bg-light m-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"display-4 pb-5 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, heading), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, projectsArray.length ? projectsArray.map((project, index) => /*#__PURE__*/React.createElement(ProjectCard, {\n    key: `project-card-${index}`,\n    id: `project-card-${index}`,\n    value: project,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  })) : dummyProjectsArr.map((project, index) => /*#__PURE__*/React.createElement(ProjectCard, {\n    key: `dummy-${index}`,\n    id: `dummy-${index}`,\n    value: project,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  })))));\n};\n\nexport default Project;","map":{"version":3,"sources":["/Users/shannelphilp/Desktop/Repositories/home/src/components/home/Project.jsx"],"names":["React","useState","useEffect","useCallback","Container","Jumbotron","Row","ProjectCard","axios","dummyProject","name","description","svn_url","stargazers_count","languages_url","pushed_at","API","Project","heading","username","length","specfic","allReposAPI","specficReposAPI","dummyProjectsArr","Array","fill","projectsArray","setProjectsArray","fetchRepos","repoList","response","get","data","slice","repoName","push","error","console","message","map","project","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Row from \"react-bootstrap/Row\";\nimport ProjectCard from \"./ProjectCard\";\nimport axios from \"axios\";\n\nconst dummyProject = {\n  name: null,\n  description: null,\n  svn_url: null,\n  stargazers_count: null,\n  languages_url: null,\n  pushed_at: null,\n};\nconst API = \"https://api.github.com\";\n// const gitHubQuery = \"/repos?sort=updated&direction=desc\";\n// const specficQuerry = \"https://api.github.com/repos/hashirshoaeb/\";\n\nconst Project = ({ heading, username, length, specfic }) => {\n  const allReposAPI = `${API}/users/${username}/repos?sort=updated&direction=desc`;\n  const specficReposAPI = `${API}/repos/${username}`;\n  const dummyProjectsArr = new Array(length + specfic.length).fill(\n    dummyProject\n  );\n\n  const [projectsArray, setProjectsArray] = useState([]);\n\n  const fetchRepos = useCallback(async () => {\n    let repoList = [];\n    try {\n      // getting all repos\n      const response = await axios.get(allReposAPI);\n      // slicing to the length\n      repoList = [...response.data.slice(0, length)];\n      // adding specified repos\n      try {\n        for (let repoName of specfic) {\n          const response = await axios.get(`${specficReposAPI}/${repoName}`);\n          repoList.push(response.data);\n        }\n      } catch (error) {\n        console.error(error.message);\n      }\n      // setting projectArray\n      // TODO: remove the duplication.\n      setProjectsArray(repoList);\n    } catch (error) {\n      console.error(error.message);\n    }\n  }, [allReposAPI, length, specfic, specficReposAPI]);\n\n  useEffect(() => {\n    fetchRepos();\n  }, [fetchRepos]);\n\n  return (\n    <Jumbotron fluid id=\"projects\" className=\"bg-light m-0\">\n      <Container className=\"\">\n        <h2 className=\"display-4 pb-5 text-center\">{heading}</h2>\n        <Row>\n          {projectsArray.length\n            ? projectsArray.map((project, index) => (\n                <ProjectCard\n                  key={`project-card-${index}`}\n                  id={`project-card-${index}`}\n                  value={project}\n                />\n              ))\n            : dummyProjectsArr.map((project, index) => (\n                <ProjectCard\n                  key={`dummy-${index}`}\n                  id={`dummy-${index}`}\n                  value={project}\n                />\n              ))}\n        </Row>\n      </Container>\n    </Jumbotron>\n  );\n};\n\nexport default Project;\n"]},"metadata":{},"sourceType":"module"}